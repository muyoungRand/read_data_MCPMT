import json

def get_seq(filename):
    """
    Function that extracts relevant sequence data from .seq files generated by MainWin

    Automatically filters for:
        1) Active Tabs
            - Raises errors if there are 0 or >1 tabs activated
        2) Active Chapters
    
    The data extracted are as follows:
        - Name of Tab
        - Name of Chapter + Durations + Scanned? for each line

    Args:
        filename (str): Path to .seq file
    Returns:
        dict: Dictionary containing relevant sequence data
    """
    # Read the sequence file
    with open(filename, "r") as f:
        file = json.loads(f.read())
        counter = 0 # Keep track of number of active tabs

        for i in file:
            if i["active"] == True:
                tab = i
                name = {"tab": tab["name"]} # Name of active tab
                counter += 1
        
        if counter == 0:
            print("No tabs are active! You just did nothing and saved it!")
        elif counter > 1:
            print("More than one tab is active! You just did stupid stuff and saved it!")

    # Extract Relevant Data
    data = [] # Stores chapter data

    for i in range(len(tab["sequence"])):
        chapter = tab["sequence"][i]

        if chapter["active"] == True: # Only look at active chapters
            dict = {}

            # Chapter Name
            dict["name"] = chapter["name"]
            
            # Chapter Type
            if "AWG" in chapter["type"]:
                dict["type"] = "AWG"
                dict["AWG_details"] = get_AWG_seq(chapter)
            elif "sideband" in chapter["type"]:
                dict["type"] = "SBC"
                dict["SBC_details"] = [chapter["n_phonons"], chapter["n_cycles"]]
            else:
                dict["type"] = "DDS"

            # Chapter Durations + Scanned?
            for j in range(len(chapter["lines"])): 
                dict["delay" + str(j)] = chapter["lines"][j]["delay"]
                dict["scanned" + str(j)] = chapter["lines"][j]["scanned"]

            data.append(dict)

    return name, data


def get_AWG_seq(input):
    awg = input["awg_channels"]

    # Check which Channels are active by ensuring that formula is NOT empty
    for i in range(1,5):
        label = "Channel " + str(i)
        if awg[label]["formula"] == "":
            pass
        else:
            active = awg[label] # Dictionary of active channel

    formula = active["formula"]
    params = active["param"] # Parameters of active channel

    output = {}

    for i in range(1, 16): # Becuase from x1 to x15
        var = "x" + str(i)

        if var in formula: # Extract parameters that are used in the formula
            output[str(var)] = [params[var]["label"], params[var]["value"]]

    output2 = {"Formula": formula}
    output2.update(output)

    return output2

if __name__=="__main__":
    main()
